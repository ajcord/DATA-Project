.nolist
#include "ti83plus.inc"
#include "Axe.inc"
.list

#define B_CALL(xxxx) rst 28h \ .dw xxxx

.dw AXM_HEADER

.dw Ax1_End
.db AXM_ALL
.dw $0BEF ;startTmr
.db AXM_INLINE
.db AXM_1ARG
.org 0
;******************************************
;SetupDMX()
;******************************************
;Initializes the DMX transmitter and sets up the calc for communication.
;Usage: SetupDMX(PTR) where PTR is a pointer to the DMX data (256 bytes minimum).
;PTR should be zeroed out first.
    push af
    ld a,%10000000  ;Disable the link assist to allow for manual link port control.
    out (8),a
    ld a,0
    out (0),a       ;Initialize the link cable (let TX and RX idle).
    out ($54),a     ;Start outputting power to the transmitter from the USB port.
    ld ($8251),hl   ;bootTemp will store the DMX data location from now on.
    pop af

Ax1_End:

.dw Ax2_End
.db AXM_ALL
.dw $D0BB ;stdDev()
.db AXM_INLINE
.db AXM_0ARG
.org 0
;******************************************
;ShutDownDMX
;******************************************
;Shut down the DMX transmitter.
;Usage: ShutDownDMX
;Use it before the main program returns or else bad things will happen.
;This command prevents unnecessary battery drain.
di
    push af
;...Insert code to tell the transmitter to start shutting down...
    ld a,$0B        ;Enable normal interrupts.
    out (3),a
    ld a,0
    out (0),a       ;Stop holding the lines low, if they were before.
    ld a,2
    out ($54),a     ;Stop sending power to the transceiver.
    pop af
    ei

Ax2_End:

.dw Ax3_End
.db AXM_ALL
.dw $0000 ;Can only be called from other commands
.db AXM_SUB
.db AXM_1ARG
.org 0
;******************************************
;SendByte - command only, no token
;******************************************
;Sends a single byte over TX.
;Format:
;1 low start bit
;8 data bits
;1 parity bit
;1 high stop bit
;Byte to be sent should be passed in as C
    di
    push af
    ld a,1
    out (0),a       ;Send the start bit on TX
;Wait 23 cycles:
    ld a,0          ;7 cycles
    nop             ;4 cycles
    nop             ;4 cycles
    nop             ;4 cycles
    nop             ;4 cycles
;Stop waiting. Send the bits:
    ld b,8                   ;7 cycles
BitLoop:
    rrc c                ;8 cycles
    jr c,Low             ;12/7 cycles
    ld a,0               ;7 cycles
    jr Output            ;12 cycles
Low:
    ld a,1               ;7 cycles
    ld a,1               ;7 cycles to waste time
Output:
    out (0),a            ;11 cycles
    ;Wait 17 cycles:
    push af              ;10 cycles
    ld a,0               ;7 cycles
    ;Stop waiting.
    djnz BitLoop         ;13/8 cycles

;Wait 27 cycles:
    pop af                   ;10 cycles
    push af                  ;10 cycles
    ld a,0                   ;7 cycles
;Stop waiting. Detect parity of C to send it out next.
    ld a,c                   ;4 cycles
    and c                    ;4 cycles
    jp pe,ParityLow          ;10 cycles
    ld a,0                   ;7 cycles
    jr ParityOutput          ;12 cycles
ParityLow:
    ld a,1               ;7 cycles
    jr ParityOutput      ;12 cycles
ParityOutput:
    out (0),a            ;11 cycles
;TODO: Wait 75 cycles, then output stop bit (high)

    pop af
    pop af
    ei
Ax3_End:

.dw AXM_END

.db $8C,$05,9,"SetupDMX("
.db $C4,$03,7,"StopDMX"

.end
