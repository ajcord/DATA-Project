.nolist
#include "ti83plus.inc"
#include "Axe.inc"
#include "DMX.inc"
.list

#define B_CALL(xxxx) rst 28h \ .dw xxxx

.dw AXM_HEADER

.dw Ax1_End
.db AXM_ALL
.dw $0BEF ;startTmr
.db AXM_INLINE
.db AXM_1ARG
.org 0
;******************************************
;SetupDMX()
;******************************************
;Initializes the DMX transmitter and sets up the calc for communication.
;Usage: SetupDMX(PTR) where PTR is a pointer to the DMX data (256 bytes minimum).
;PTR should be zeroed out first.
  push af
  ld a,%10000000  ;Disable the link assist to allow for manual link port control.
  out (8),a
  ld a,0
  out (0),a       ;Initialize the link cable (let TX and RX idle).
  out ($54),a     ;Start outputting power to the transmitter from the USB port.
  ld ($8251),hl   ;bootTemp will store the DMX data location from now on.
  pop af
Ax1_End:

.dw Ax2_End
.db AXM_ALL
.dw $D0BB ;stdDev()
.db AXM_INLINE
.db AXM_0ARGS
.org 0
;******************************************
;ShutDownDMX
;******************************************
;Shut down the DMX transmitter.
;Usage: ShutDownDMX
;Use it before the main program returns or else bad things will happen.
;This command prevents unnecessary battery drain.
di
  push af
;Tell the transmitter to power down:
  ld hl,PowerDownPacket
  ld b,1
  call SendBytes
WaitToPowerDown:
  ld hl,PollShutDown
  ld b,1
  call SendBytes            ;Tell the transmitter to start shutting down
  ld hl,saveSScreen+700     ;Where the status will be stored
  call GetBytes             ;Get the transmitter's status
  jr nz,WaitToPowerDown     ;If there was a transmission error, try again
  ld b,(saveSScreen+700)    ;Get the byte that was received
  ld a,StatusReadyPowerDown
  cp b                      ;Is the transmitter is ready to power off?
  jr nz,WaitToPowerDown     ;Poll it until it's ready
  ld a,$0B                  ;Enable normal interrupts
  out (3),a
  ld a,0
  out (0),a                 ;Stop holding the lines low, if they were before
  ld a,2
  out ($54),a               ;Turn off power to the transmitter
  pop af
  ei
  jr Ax2_End
PowerDownPacket:
  .db CmdStartShutdown
PollShutDown:
  .db CmdRequestStatus

Ax2_End:

.dw Ax3_End
.db AXM_ALL
.dw $0000 ;Can only be called from other commands
.db AXM_SUB
.db AXM_1ARG
.org 0
;******************************************
;SendBytes - command only, no token
;******************************************
;Sends bytes over TX.

;Format:
;1 low start bit
;8 data bits
;1 parity bit
;1 high stop bit

;Inputs:
;hl: pointer to data to be sent
;b: number of bytes to send
;Destroys: af
;Outputs:
;hl points to the byte after data
  di
  push de
ByteLoop:
  push bc                   ;10 cycles
  ld a,1                    ;7 cycles
  out (0),a                 ;11 cycles. Send the start bit on TX
  ld b,8                    ;7 cycles. Number of bits to send
  ld c,(hl)                 ;7 cycles. Get the byte to send
;Wait 12 cycles:
  nop                       ;4 cycles
  nop                       ;4 cycles
  nop                       ;4 cycles
;Stop waiting. Send the bits:
BitLoop:
;Wait 4 cycles:
  nop                       ;4 cycles
;Stop waiting.
  rrc c                     ;8 cycles
  jr c,Low                  ;12/7 cycles
  ld a,0                    ;7 cycles
  jr Output                 ;12 cycles
Low:
  ld a,1                    ;7 cycles
  ld a,1                    ;7 cycles to waste time
Output:
  out (0),a                 ;11 cycles
;Wait 13 cycles:
  inc de                    ;6 cycles
  ld a,0                    ;7 cycles
;Stop waiting. Send another bit.
  djnz BitLoop              ;13/8 cycles
;Detect parity of C to send it out next.
  ld a,0                    ;7 cycles
  or c                     ;4 cycles
  jp pe,ParityLow           ;10 cycles
  ld a,0                    ;7 cycles
  jr ParityOutput           ;12 cycles
ParityLow:
  ld a,1                    ;7 cycles
  jr ParityOutput           ;12 cycles
ParityOutput:
  out (0),a                 ;11 cycles
;Wait 57 cycles:
  ld b,2                    ;7 cycles
WaitLoop1:
  nop                       ;4 cycles
  djnz WaitLoop1            ;13/8 cycles
  nop                       ;4 cycles
  nop                       ;4 cycles
;Stop waiting. Output stop bit (high):
  ld a,0                    ;7 cycles
  out (0),a                 ;11 cycles
;Wait 8 cycles:
  nop                       ;4 cycles
  nop                       ;4 cycles
;Stop waiting.
  pop af                    ;10 cycles
  pop bc                    ;10 cycles
  inc hl                    ;6 cycles
  djnz ByteLoop             ;13/8 cycles
;Wait 23 cycles:
  ld a,0                    ;7 cycles
  nop                       ;4 cycles
  nop                       ;4 cycles
  nop                       ;4 cycles
  nop                       ;4 cycles
;Stop waiting.
  pop de                    ;10 cycles
  ei
  ret
Ax3_End:

.dw AXM_END

.db $8C,$05,9,"SetupDMX("
.db $C4,$03,11,"ShutDownDMX"

.end
