.nolist
#include "ti83plus.inc"
#include "Axe.inc"
.list

#define bcall(xxxx) rst 28h \ .dw xxxx

.dw AXM_HEADER

.dw Ax1_End
.db AXM_ALL
.dw $0BEF ;startTmr
.db AXM_SUB
.db AXM_0ARG
.org 0
;******************************************
;SetupDMX
;******************************************
;Performs the handshake with the transmitter
    ;;TODO: Make sure this turns on all the necessary ports.
    ;;http://wikiti.brandonw.net/index.php?title=83Plus:Ports:54
    ;ld a,C4h
    ;out (54h),a     ;Turn on USB power to the transmitter
    
    AppOnErr Ax1_Link_Err
    bcall(_SendReadyPacket)
    AppOffErr
    ld hl,1 ;Return 1 for success
    ret
Ax1_Link_Err:
    ld hl,0 ;Return zero for failure
    ret

Ax1_End:

.dw Ax2_End
.db AXM_ALL
.dw $D0BB ;stdDev()
.db AXM_SUB
.db AXM_0ARG
.org 0
;******************************************
;ShutDownDMX
;******************************************
;Gracefully shut down the DMX transmitter.
;Use it before the main program returns.
    ;send no-op to disable protection
    AppOnErr Ax2_Link_Err
    ld a,15h
    ld hl,OP1
    ld (hl),0
    ld de,1
    bcall(_SendRAMCmd)
    AppOffErr
    
    ;receive ACK
    AppOnErr Ax2_Link_Err
    bcall(_ReceiveAck)
    AppOffErr
    ;receive echo
    AppOnErr Ax2_Link_Err
    ld bc,1
    ld de,OP1
    bcall(_GetDataPacket)
    AppOffErr
    
    ;send F0h (shutdown)
    AppOnErr Ax2_Link_Err
    ld a,15h
    ld hl,OP1
    ld (hl),F0h
    ld de,1
    bcall(_SendRAMCmd)
    AppOffErr
    
    ;receive ACK
    AppOnErr Ax2_Link_Err
    bcall(_ReceiveAck)
    AppOffErr
    ;receive power down notification (FFh)
    AppOnErr Ax2_Link_Err
    ld bc,1
    ld de,OP1
    bcall(_GetDataPacket)
    AppOffErr
    ;receive EOT
    AppOnErr Ax2_Link_Err
    bcall(_Get4Bytes)
    AppOffErr
    ;;wait for ~222us to give the transmitter time to finish up
    ;ld b,255
    ;djnz 0
    
    ;;TODO: Make sure this turns off all the relevant ports.
    ;;http://wikiti.brandonw.net/index.php?title=83Plus:Ports:54
    ;ld a,2
    ;out (54h),a     ;Stop sending power to the transceiver.
    
    ld hl,1 ;Return 1 for success
    ret
Ax2_Link_Err:
    ld hl,0 ;Return zero for link failure
    ret

Ax2_End:

.dw Ax3_End
.db AXM_ALL
.dw $D0BB ;stdDev()
.db AXM_SUB
.db AXM_1ARG
.org 0
;******************************************
;SendChannels(ptr)
;Sets channels 0-511
;ptr: pointer to 512 channels to send
;******************************************
    ld (OP1),hl ;Save HL because AppOnErr destroys it and messes with the stack
    AppOnErr Ax3_Link_Err
    ld hl,(OP1) ;Restore HL
    ld a,15h
    ld de,513
    dec hl
    ld a,(hl)
    ld (OP1+2),a ;Save the byte we are overwriting
    ld (hl),22h
    bcall(_SendRAMCmd)
    ld hl,(OP1)
    dec hl
    ld a,(OP1+2)
    ld (hl),a ;Restore the byte that was overwritten
    AppOffErr
    ld hl,1 ;Return 1 for success
    ret
Ax3_Link_Err:
    ld hl,(OP1)
    dec hl
    ld a,(OP1+2)
    ld (hl),a ;Restore the byte that was overwritten
    ld hl,0 ;Return zero for link failure
    ret

Ax3_End:

.dw Ax4_End
.db AXM_ALL
.dw $D0BB ;stdDev()
.db AXM_SUB|AXM_RMOD
.db AXM_1ARG
.org 0
;******************************************
;SendChannels(ptr)r
;Sets channels 0-255
;ptr: pointer to 256 channels to send
;NOTE: Destroys the byte immediately before the pointer!
;******************************************
    ld (OP1),hl ;Save HL because AppOnErr destroys it and messes with the stack
    AppOnErr Ax4_Link_Err
    ld hl,(OP1) ;Restore HL
    ld a,15h
    ld de,257
    dec hl
    ld a,(hl)
    ld (OP1+2),a ;Save the byte we are overwriting
    ld (hl),22h
    bcall(_SendRAMCmd)
    ld hl,(OP1)
    dec hl
    ld a,(OP1+2)
    ld (hl),a ;Restore the byte that was overwritten
    AppOffErr
    ld hl,1 ;Return 1 for success
    ret
Ax4_Link_Err:
    ld hl,(OP1)
    dec hl
    ld a,(OP1+2)
    ld (hl),a ;Restore the byte that was overwritten
    ld hl,0 ;Return zero for link failure
    ret
Ax4_End:

.dw Ax5_End
.db AXM_ALL
.dw $D0BB ;stdDev()
.db AXM_SUB|AXM_RRMOD
.db AXM_1ARG
.org 0
;******************************************
;SendChannels(ptr)rr
;Sets channels 256-511
;ptr: pointer to 256 channels to send
;NOTE: Destroys the byte immediately before the pointer!
;******************************************
    ld (OP1),hl ;Save HL because AppOnErr destroys it and messes with the stack
    AppOnErr Ax5_Link_Err
    ld hl,(OP1) ;Restore HL
    ld a,15h
    ld de,257
    dec hl
    ld a,(hl)
    ld (OP1+2),a ;Save the byte we are overwriting
    ld (hl),22h
    bcall(_SendRAMCmd)
    ld hl,(OP1)
    dec hl
    ld a,(OP1+2)
    ld (hl),a ;Restore the byte that was overwritten
    AppOffErr
    ld hl,1 ;Return 1 for success
    ret
Ax5_Link_Err:
    ld hl,(OP1)
    dec hl
    ld a,(OP1+2)
    ld (hl),a ;Restore the byte that was overwritten
    ld hl,0 ;Return zero for link failure
    ret
Ax5_End:

.dw Ax6_End
.db AXM_ALL
.dw $D0BB ;stdDev()
.db AXM_SUB
.db AXM_1ARG
.org 0
;******************************************
;GetChannels(ptr)
;Gets all 512 channels
;ptr: pointer to store 512 channels at
;NOTE: Destroys the byte immediately before the pointer!
;******************************************
    ld (OP1),hl ;Save HL because AppOnErr destroys it and messes with the stack
    AppOnErr Ax6_Link_Err
    ld a,15h
    ld de,1
    ld hl,OP1+1
    ld (hl),42h
    bcall(_SendRAMCmd) ;Send the request
    
    ld bc,513
    ld de,(OP1)
    dec de
    ld a,(de)
    ld (OP1+2),a ;Save the byte we are overwriting
    bcall(_GetDataPacket)
    
    ld de,(OP1+2)
    ld (de),a ;Restore the byte that was overwritten
    AppOffErr
    ld hl,1 ;Return 1 for success
    ret
Ax6_Link_Err:
    ld hl,(OP1)
    dec hl
    ld (hl),OP1+2 ;Restore the byte that was overwritten
    ld hl,0 ;Return zero for link failure
    ret
Ax6_End:


.dw AXM_END

.db $8C,$05,8,"SetupDMX"
.db $C4,$03,11,"ShutDownDMX"
.db $C4,$03,13,"SendChannels("

.end
